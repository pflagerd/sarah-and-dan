!function(){"use strict";"undefined"==typeof globalThis&&(window.globalThis=window),(()=>{if(!globalThis.browser&&globalThis.chrome){const e=globalThis.chrome;globalThis.__defineGetter__("browser",(()=>({action:{onClicked:{addListener:t=>e.action.onClicked.addListener(t)},setBadgeText:t=>e.action.setBadgeText(t),setBadgeBackgroundColor:t=>e.action.setBadgeBackgroundColor(t),setTitle:t=>e.action.setTitle(t),setIcon:t=>e.action.setIcon(t)},bookmarks:{get:t=>e.bookmarks.get(t),onCreated:{addListener:t=>e.bookmarks.onCreated.addListener(t),removeListener:t=>e.bookmarks.onCreated.removeListener(t)},onChanged:{addListener:t=>e.bookmarks.onChanged.addListener(t),removeListener:t=>e.bookmarks.onChanged.removeListener(t)},onMoved:{addListener:t=>e.bookmarks.onMoved.addListener(t),removeListener:t=>e.bookmarks.onMoved.removeListener(t)},update:(t,r)=>e.bookmarks.update(t,r)},commands:{onCommand:{addListener:t=>e.commands.onCommand.addListener(t)}},downloads:{download:t=>e.downloads.download(t),onChanged:{addListener:t=>e.downloads.onChanged.addListener(t),removeListener:t=>e.downloads.onChanged.removeListener(t)},search:t=>e.downloads.search(t)},i18n:{getUILanguage:()=>e.i18n.getUILanguage(),getMessage:(t,r)=>e.i18n.getMessage(t,r)},identity:{getRedirectURL:()=>e.identity.getRedirectURL(),getAuthToken:t=>e.identity.getAuthToken(t),launchWebAuthFlow:t=>e.identity.launchWebAuthFlow(t),removeCachedAuthToken:t=>e.identity.removeCachedAuthToken(t)},contextMenus:{onClicked:{addListener:t=>e.contextMenus.onClicked.addListener(t)},create:t=>e.contextMenus.create(t),update:(t,r)=>e.contextMenus.update(t,r),removeAll:()=>e.contextMenus.removeAll()},permissions:{request:t=>e.permissions.request(t),remove:t=>e.permissions.remove(t)},runtime:{id:e.runtime.id,sendNativeMessage:(t,r)=>new Promise(((s,a)=>{e.runtime.sendNativeMessage(t,r,(t=>{e.runtime.lastError?a(e.runtime.lastError):s(t)}))})),getManifest:()=>e.runtime.getManifest(),onMessage:{addListener:t=>e.runtime.onMessage.addListener(((e,r,s)=>{const a=t(e,r);if(a&&"function"==typeof a.then)return a.then((e=>{if(void 0!==e)try{s(e)}catch(e){}})),!0})),removeListener:t=>e.runtime.onMessage.removeListener(t)},onMessageExternal:{addListener:t=>e.runtime.onMessageExternal.addListener(((e,r,s)=>{const a=t(e,r);if(a&&"function"==typeof a.then)return a.then((e=>{if(void 0!==e)try{s(e)}catch(e){}})),!0}))},sendMessage:t=>new Promise(((r,s)=>{e.runtime.sendMessage(t,(t=>{e.runtime.lastError?s(e.runtime.lastError):r(t)})),e.runtime.lastError&&s(e.runtime.lastError)})),getURL:t=>e.runtime.getURL(t),getContexts:t=>e.runtime.getContexts(t),get lastError(){return e.runtime.lastError}},scripting:{executeScript:t=>e.scripting.executeScript(t)},storage:{local:{set:t=>e.storage.local.set(t),get:t=>e.storage.local.get(t),clear:()=>e.storage.local.clear(),remove:t=>e.storage.local.remove(t)},sync:{set:t=>e.storage.sync.set(t),get:t=>e.storage.sync.get(t),clear:()=>e.storage.sync.clear(),remove:t=>e.storage.sync.remove(t)}},tabs:{onCreated:{addListener:t=>e.tabs.onCreated.addListener(t)},onActivated:{addListener:t=>e.tabs.onActivated.addListener(t)},onUpdated:{addListener:t=>e.tabs.onUpdated.addListener(t),removeListener:t=>e.tabs.onUpdated.removeListener(t)},onRemoved:{addListener:t=>e.tabs.onRemoved.addListener(t),removeListener:t=>e.tabs.onRemoved.removeListener(t)},onReplaced:{addListener:t=>e.tabs.onReplaced.addListener(t),removeListener:t=>e.tabs.onReplaced.removeListener(t)},captureVisibleTab:(t,r)=>e.tabs.captureVisibleTab(t,r),sendMessage:(t,r,s={})=>new Promise(((a,n)=>{e.tabs.sendMessage(t,r,s,(t=>{e.runtime.lastError?n(e.runtime.lastError):a(t)})),e.runtime.lastError&&n(e.runtime.lastError)})),query:t=>e.tabs.query(t),create:t=>e.tabs.create(t),get:t=>e.tabs.get(t),remove:t=>e.tabs.remove(t),update:(t,r)=>e.tabs.update(t,r)},devtools:{inspectedWindow:{onResourceContentCommitted:{addListener:t=>e.devtools.inspectedWindow.onResourceContentCommitted.addListener(t)},get tabId(){return e.devtools.inspectedWindow.tabId}}},offscreen:{createDocument:t=>e.offscreen.createDocument(t)},declarativeNetRequest:{updateSessionRules:t=>e.declarativeNetRequest.updateSessionRules(t)}})))}})();const e=8388608;let t=1;async function r(t,r,s){for(let a=0;a*e<=s.array.length;a++){const n={method:"singlefile.fetchResponse",requestId:r,headers:s.headers,status:s.status,error:s.error};n.truncated=s.array.length>e,n.truncated?(n.finished=(a+1)*e>s.array.length,n.array=s.array.slice(a*e,(a+1)*e)):n.array=s.array,await browser.tabs.sendMessage(t,n)}return{}}async function s(e,r){const s=t++;return await browser.declarativeNetRequest.updateSessionRules({addRules:[{action:{type:"modifyHeaders",requestHeaders:[{header:"Referer",operation:"set",value:r}]},condition:{initiatorDomains:[browser.runtime.id],urlFilter:e,resourceTypes:["xmlhttprequest"]},id:s}]}),s}browser.runtime.onMessage.addListener(((e,t)=>{if(e.method&&e.method.startsWith("singlefile.fetch"))return new Promise((a=>{(async function(e,t){if("singlefile.fetch"==e.method)try{const a=await async function(e,t={}){t.cache="no-store";const r=await fetch(e,t);if(t.referrer&&401==r.status||403==r.status||404==r.status){const r=await s(e,t.referrer);await new Promise((e=>setTimeout(e,1e3)));try{const r=await fetch(e,t),s=Array.from(new Uint8Array(await r.arrayBuffer())),a={"content-type":r.headers.get("content-type")};return{array:s,headers:a,status:r.status}}finally{await async function(e){await browser.declarativeNetRequest.updateSessionRules({removeRuleIds:[e]})}(r)}}const a=Array.from(new Uint8Array(await r.arrayBuffer())),n={"content-type":r.headers.get("content-type")},o=r.status;return{array:a,headers:n,status:o}}(e.url,{referrer:e.referrer,headers:e.headers});return r(t.tab.id,e.requestId,a)}catch(s){return r(t.tab.id,e.requestId,{error:s.message,array:[]})}else if("singlefile.fetchFrame"==e.method)return browser.tabs.sendMessage(t.tab.id,e)})(e,t).then(a).catch((e=>a({error:e&&(e.message||e.toString())})))}))})),browser.runtime.onMessage.addListener(((e,t)=>{if("singlefile.frameTree.initResponse"==e.method||"singlefile.frameTree.ackInitRequest"==e.method)return browser.tabs.sendMessage(t.tab.id,e,{frameId:0}),Promise.resolve({})}));const a=new Map;function n(e,t){e.delete(t)}browser.runtime.onMessage.addListener(((e,t)=>{if("singlefile.lazyTimeout.setTimeout"==e.method){let r,s=a.get(t.tab.id);if(s)if(r=s.get(t.frameId),r){const t=r.get(e.type);t&&clearTimeout(t)}else r=new Map;const o=setTimeout((async()=>{try{const r=a.get(t.tab.id),s=r.get(t.frameId);r&&s&&n(s,e.type),await browser.tabs.sendMessage(t.tab.id,{method:"singlefile.lazyTimeout.onTimeout",type:e.type})}catch(e){}}),e.delay);return s||(s=new Map,r=new Map,s.set(t.frameId,r),a.set(t.tab.id,s)),r.set(e.type,o),Promise.resolve({})}if("singlefile.lazyTimeout.clearTimeout"==e.method){let r=a.get(t.tab.id);if(r){const s=r.get(t.frameId);if(s){const t=s.get(e.type);t&&clearTimeout(t),n(s,e.type)}}return Promise.resolve({})}})),browser.tabs.onRemoved.addListener((e=>a.delete(e)))}();
